// Code generated by MockGen. DO NOT EDIT.
// Source: users/v1/users_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	v1 "grpc/users/v1"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUsersServiceClient is a mock of UsersServiceClient interface.
type MockUsersServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUsersServiceClientMockRecorder
}

// MockUsersServiceClientMockRecorder is the mock recorder for MockUsersServiceClient.
type MockUsersServiceClientMockRecorder struct {
	mock *MockUsersServiceClient
}

// NewMockUsersServiceClient creates a new mock instance.
func NewMockUsersServiceClient(ctrl *gomock.Controller) *MockUsersServiceClient {
	mock := &MockUsersServiceClient{ctrl: ctrl}
	mock.recorder = &MockUsersServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersServiceClient) EXPECT() *MockUsersServiceClientMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUsersServiceClient) CreateUser(ctx context.Context, in *v1.CreateUserRequest, opts ...grpc.CallOption) (*v1.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*v1.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersServiceClientMockRecorder) CreateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsersServiceClient)(nil).CreateUser), varargs...)
}

// GetUser mocks base method.
func (m *MockUsersServiceClient) GetUser(ctx context.Context, in *v1.GetUserRequest, opts ...grpc.CallOption) (*v1.GetUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].(*v1.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUsersServiceClientMockRecorder) GetUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUsersServiceClient)(nil).GetUser), varargs...)
}

// MockUsersServiceServer is a mock of UsersServiceServer interface.
type MockUsersServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUsersServiceServerMockRecorder
}

// MockUsersServiceServerMockRecorder is the mock recorder for MockUsersServiceServer.
type MockUsersServiceServerMockRecorder struct {
	mock *MockUsersServiceServer
}

// NewMockUsersServiceServer creates a new mock instance.
func NewMockUsersServiceServer(ctrl *gomock.Controller) *MockUsersServiceServer {
	mock := &MockUsersServiceServer{ctrl: ctrl}
	mock.recorder = &MockUsersServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersServiceServer) EXPECT() *MockUsersServiceServerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUsersServiceServer) CreateUser(arg0 context.Context, arg1 *v1.CreateUserRequest) (*v1.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersServiceServerMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsersServiceServer)(nil).CreateUser), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockUsersServiceServer) GetUser(arg0 context.Context, arg1 *v1.GetUserRequest) (*v1.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUsersServiceServerMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUsersServiceServer)(nil).GetUser), arg0, arg1)
}

// mustEmbedUnimplementedUsersServiceServer mocks base method.
func (m *MockUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUsersServiceServer")
}

// mustEmbedUnimplementedUsersServiceServer indicates an expected call of mustEmbedUnimplementedUsersServiceServer.
func (mr *MockUsersServiceServerMockRecorder) mustEmbedUnimplementedUsersServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUsersServiceServer", reflect.TypeOf((*MockUsersServiceServer)(nil).mustEmbedUnimplementedUsersServiceServer))
}

// MockUnsafeUsersServiceServer is a mock of UnsafeUsersServiceServer interface.
type MockUnsafeUsersServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUsersServiceServerMockRecorder
}

// MockUnsafeUsersServiceServerMockRecorder is the mock recorder for MockUnsafeUsersServiceServer.
type MockUnsafeUsersServiceServerMockRecorder struct {
	mock *MockUnsafeUsersServiceServer
}

// NewMockUnsafeUsersServiceServer creates a new mock instance.
func NewMockUnsafeUsersServiceServer(ctrl *gomock.Controller) *MockUnsafeUsersServiceServer {
	mock := &MockUnsafeUsersServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUsersServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUsersServiceServer) EXPECT() *MockUnsafeUsersServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUsersServiceServer mocks base method.
func (m *MockUnsafeUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUsersServiceServer")
}

// mustEmbedUnimplementedUsersServiceServer indicates an expected call of mustEmbedUnimplementedUsersServiceServer.
func (mr *MockUnsafeUsersServiceServerMockRecorder) mustEmbedUnimplementedUsersServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUsersServiceServer", reflect.TypeOf((*MockUnsafeUsersServiceServer)(nil).mustEmbedUnimplementedUsersServiceServer))
}
